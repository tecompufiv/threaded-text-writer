Hey, can you help with me the task? It's java version 11+.

[Done] You should implement an application in text mode that allows you to find and write divisors of 
large numbers (minimum uint 32) using a simple method (checking each smaller is a divisor). In 
order to simulate the complexity of the calculations you can use the Thread.sleep method with 
less time consuming calculations.
[Done] Prepare a shared variable or object that will allow you to submit and retrieve subsequent tasks. 
[Done] The threads are to wait for the request to retrieve the data.
[Done] To synchronize threads use the wait-notify mechanism.


[Done] Prepare a mechanism for initializing the starting numbers retrieved from the .txt file (each number on a new line).
[Done] We put the results in one .txt file in the form:
"number given1: divisors1, divisor2, divisor3 ...
number given2: divisors1, divisor2, divisor3 ..."

[Done] Use a critical section mechanism (e.g., semaphore) when writing to the file.

[Done] The number of threads is to be as a program call parameter. 
[1/2 Done] Implement the ability to add numbers into the queue 
from the console (using System.in by means of the Scanner class).

[Done]The termination of the application is done by typing in the console: "exit". After the command has been executed 
"exit" command all threads are to be correctly terminated and the queue is to be emptied.